/* tslint:disable */
/* eslint-disable */
/**
 * Bync api
 * Bync internal api
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface AuthControllerSignup200Response
 */
export interface AuthControllerSignup200Response {
  /**
   *
   * @type {string}
   * @memberof AuthControllerSignup200Response
   */
  customerId: string;
  /**
   *
   * @type {string}
   * @memberof AuthControllerSignup200Response
   */
  userId: string;
}
/**
 *
 * @export
 * @interface AuthControllerSignupRequest
 */
export interface AuthControllerSignupRequest {
  /**
   *
   * @type {string}
   * @memberof AuthControllerSignupRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AuthControllerSignupRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof AuthControllerSignupRequest
   */
  fullName: string;
}
/**
 *
 * @export
 * @interface BankingControllerCreateConnection200Response
 */
export interface BankingControllerCreateConnection200Response {
  /**
   *
   * @type {string}
   * @memberof BankingControllerCreateConnection200Response
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerCreateConnection200Response
   */
  linkId: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerCreateConnection200Response
   */
  institution: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerCreateConnection200Response
   */
  status: BankingControllerCreateConnection200ResponseStatusEnum;
}

export const BankingControllerCreateConnection200ResponseStatusEnum = {
  Pending: 'pending',
  Connected: 'connected',
  Error: 'error',
} as const;

export type BankingControllerCreateConnection200ResponseStatusEnum =
  (typeof BankingControllerCreateConnection200ResponseStatusEnum)[keyof typeof BankingControllerCreateConnection200ResponseStatusEnum];

/**
 *
 * @export
 * @interface BankingControllerCreateConnectionRequest
 */
export interface BankingControllerCreateConnectionRequest {
  /**
   *
   * @type {string}
   * @memberof BankingControllerCreateConnectionRequest
   */
  linkId: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerCreateConnectionRequest
   */
  institution: string;
}
/**
 *
 * @export
 * @interface BankingControllerGetBankAccounts200Response
 */
export interface BankingControllerGetBankAccounts200Response {
  /**
   *
   * @type {Array<BankingControllerGetBankAccounts200ResponseBankAccountsInner>}
   * @memberof BankingControllerGetBankAccounts200Response
   */
  bankAccounts: Array<BankingControllerGetBankAccounts200ResponseBankAccountsInner>;
}
/**
 *
 * @export
 * @interface BankingControllerGetBankAccounts200ResponseBankAccountsInner
 */
export interface BankingControllerGetBankAccounts200ResponseBankAccountsInner {
  /**
   *
   * @type {string}
   * @memberof BankingControllerGetBankAccounts200ResponseBankAccountsInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerGetBankAccounts200ResponseBankAccountsInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerGetBankAccounts200ResponseBankAccountsInner
   */
  number: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerGetBankAccounts200ResponseBankAccountsInner
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof BankingControllerGetBankAccounts200ResponseBankAccountsInner
   */
  institution: string;
  /**
   *
   * @type {number}
   * @memberof BankingControllerGetBankAccounts200ResponseBankAccountsInner
   */
  balance: number;
}
/**
 *
 * @export
 * @interface BelvoControllerCreateSession200Response
 */
export interface BelvoControllerCreateSession200Response {
  /**
   *
   * @type {string}
   * @memberof BelvoControllerCreateSession200Response
   */
  access: string;
  /**
   *
   * @type {string}
   * @memberof BelvoControllerCreateSession200Response
   */
  refresh: string;
}
/**
 *
 * @export
 * @interface YnabControllerAuthorizeRequest
 */
export interface YnabControllerAuthorizeRequest {
  /**
   *
   * @type {string}
   * @memberof YnabControllerAuthorizeRequest
   */
  authCode: string;
  /**
   *
   * @type {string}
   * @memberof YnabControllerAuthorizeRequest
   */
  redirectURL: string;
}
/**
 *
 * @export
 * @interface YnabControllerGetAll200Response
 */
export interface YnabControllerGetAll200Response {
  /**
   *
   * @type {Array<YnabControllerGetAll200ResponseAccountsInner>}
   * @memberof YnabControllerGetAll200Response
   */
  accounts: Array<YnabControllerGetAll200ResponseAccountsInner>;
}
/**
 *
 * @export
 * @interface YnabControllerGetAll200ResponseAccountsInner
 */
export interface YnabControllerGetAll200ResponseAccountsInner {
  /**
   *
   * @type {string}
   * @memberof YnabControllerGetAll200ResponseAccountsInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof YnabControllerGetAll200ResponseAccountsInner
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof YnabControllerGetAll200ResponseAccountsInner
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof YnabControllerGetAll200ResponseAccountsInner
   */
  balance: number;
  /**
   *
   * @type {string}
   * @memberof YnabControllerGetAll200ResponseAccountsInner
   */
  linkedBankAccountId?: string;
  /**
   *
   * @type {any}
   * @memberof YnabControllerGetAll200ResponseAccountsInner
   */
  lastSyncedAt?: any;
}
/**
 *
 * @export
 * @interface YnabControllerLinkRequest
 */
export interface YnabControllerLinkRequest {
  /**
   *
   * @type {string}
   * @memberof YnabControllerLinkRequest
   */
  bankAccountID: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {AuthControllerSignupRequest} authControllerSignupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignup: async (
      authControllerSignupRequest: AuthControllerSignupRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authControllerSignupRequest' is not null or undefined
      assertParamExists(
        'authControllerSignup',
        'authControllerSignupRequest',
        authControllerSignupRequest
      );
      const localVarPath = `/auth/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authControllerSignupRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {AuthControllerSignupRequest} authControllerSignupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authControllerSignup(
      authControllerSignupRequest: AuthControllerSignupRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthControllerSignup200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authControllerSignup(
          authControllerSignupRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthApi.authControllerSignup']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @param {AuthControllerSignupRequest} authControllerSignupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerSignup(
      authControllerSignupRequest: AuthControllerSignupRequest,
      options?: any
    ): AxiosPromise<AuthControllerSignup200Response> {
      return localVarFp
        .authControllerSignup(authControllerSignupRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {AuthControllerSignupRequest} authControllerSignupRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public authControllerSignup(
    authControllerSignupRequest: AuthControllerSignupRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthApiFp(this.configuration)
      .authControllerSignup(authControllerSignupRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BankingApi - axios parameter creator
 * @export
 */
export const BankingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {BankingControllerCreateConnectionRequest} bankingControllerCreateConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankingControllerCreateConnection: async (
      bankingControllerCreateConnectionRequest: BankingControllerCreateConnectionRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'bankingControllerCreateConnectionRequest' is not null or undefined
      assertParamExists(
        'bankingControllerCreateConnection',
        'bankingControllerCreateConnectionRequest',
        bankingControllerCreateConnectionRequest
      );
      const localVarPath = `/banking/connection`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bankingControllerCreateConnectionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankingControllerGetBankAccounts: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/banking/accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BankingApi - functional programming interface
 * @export
 */
export const BankingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BankingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {BankingControllerCreateConnectionRequest} bankingControllerCreateConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bankingControllerCreateConnection(
      bankingControllerCreateConnectionRequest: BankingControllerCreateConnectionRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BankingControllerCreateConnection200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.bankingControllerCreateConnection(
          bankingControllerCreateConnectionRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BankingApi.bankingControllerCreateConnection']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bankingControllerGetBankAccounts(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BankingControllerGetBankAccounts200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.bankingControllerGetBankAccounts(
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BankingApi.bankingControllerGetBankAccounts']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BankingApi - factory interface
 * @export
 */
export const BankingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BankingApiFp(configuration);
  return {
    /**
     *
     * @param {BankingControllerCreateConnectionRequest} bankingControllerCreateConnectionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankingControllerCreateConnection(
      bankingControllerCreateConnectionRequest: BankingControllerCreateConnectionRequest,
      options?: any
    ): AxiosPromise<BankingControllerCreateConnection200Response> {
      return localVarFp
        .bankingControllerCreateConnection(
          bankingControllerCreateConnectionRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankingControllerGetBankAccounts(
      options?: any
    ): AxiosPromise<BankingControllerGetBankAccounts200Response> {
      return localVarFp
        .bankingControllerGetBankAccounts(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BankingApi - object-oriented interface
 * @export
 * @class BankingApi
 * @extends {BaseAPI}
 */
export class BankingApi extends BaseAPI {
  /**
   *
   * @param {BankingControllerCreateConnectionRequest} bankingControllerCreateConnectionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BankingApi
   */
  public bankingControllerCreateConnection(
    bankingControllerCreateConnectionRequest: BankingControllerCreateConnectionRequest,
    options?: RawAxiosRequestConfig
  ) {
    return BankingApiFp(this.configuration)
      .bankingControllerCreateConnection(
        bankingControllerCreateConnectionRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BankingApi
   */
  public bankingControllerGetBankAccounts(options?: RawAxiosRequestConfig) {
    return BankingApiFp(this.configuration)
      .bankingControllerGetBankAccounts(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BelvoApi - axios parameter creator
 * @export
 */
export const BelvoApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    belvoControllerCreateSession: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/belvo/session`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BelvoApi - functional programming interface
 * @export
 */
export const BelvoApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BelvoApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async belvoControllerCreateSession(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<BelvoControllerCreateSession200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.belvoControllerCreateSession(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BelvoApi.belvoControllerCreateSession']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BelvoApi - factory interface
 * @export
 */
export const BelvoApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BelvoApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    belvoControllerCreateSession(
      options?: any
    ): AxiosPromise<BelvoControllerCreateSession200Response> {
      return localVarFp
        .belvoControllerCreateSession(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BelvoApi - object-oriented interface
 * @export
 * @class BelvoApi
 * @extends {BaseAPI}
 */
export class BelvoApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BelvoApi
   */
  public belvoControllerCreateSession(options?: RawAxiosRequestConfig) {
    return BelvoApiFp(this.configuration)
      .belvoControllerCreateSession(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BelvoWebhookApi - axios parameter creator
 * @export
 */
export const BelvoWebhookApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksControllerReceiveBelvoWebhook: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/belvo/webhook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BelvoWebhookApi - functional programming interface
 * @export
 */
export const BelvoWebhookApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    BelvoWebhookApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async webhooksControllerReceiveBelvoWebhook(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.webhooksControllerReceiveBelvoWebhook(
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap[
          'BelvoWebhookApi.webhooksControllerReceiveBelvoWebhook'
        ]?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BelvoWebhookApi - factory interface
 * @export
 */
export const BelvoWebhookApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BelvoWebhookApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksControllerReceiveBelvoWebhook(options?: any): AxiosPromise<void> {
      return localVarFp
        .webhooksControllerReceiveBelvoWebhook(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BelvoWebhookApi - object-oriented interface
 * @export
 * @class BelvoWebhookApi
 * @extends {BaseAPI}
 */
export class BelvoWebhookApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BelvoWebhookApi
   */
  public webhooksControllerReceiveBelvoWebhook(
    options?: RawAxiosRequestConfig
  ) {
    return BelvoWebhookApiFp(this.configuration)
      .webhooksControllerReceiveBelvoWebhook(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * IdentityApi - axios parameter creator
 * @export
 */
export const IdentityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityControllerMe: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/identity/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * IdentityApi - functional programming interface
 * @export
 */
export const IdentityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IdentityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identityControllerMe(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.identityControllerMe(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['IdentityApi.identityControllerMe']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * IdentityApi - factory interface
 * @export
 */
export const IdentityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = IdentityApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identityControllerMe(options?: any): AxiosPromise<void> {
      return localVarFp
        .identityControllerMe(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * IdentityApi - object-oriented interface
 * @export
 * @class IdentityApi
 * @extends {BaseAPI}
 */
export class IdentityApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityApi
   */
  public identityControllerMe(options?: RawAxiosRequestConfig) {
    return IdentityApiFp(this.configuration)
      .identityControllerMe(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * YnabApi - axios parameter creator
 * @export
 */
export const YnabApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {YnabControllerAuthorizeRequest} ynabControllerAuthorizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ynabControllerAuthorize: async (
      ynabControllerAuthorizeRequest: YnabControllerAuthorizeRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'ynabControllerAuthorizeRequest' is not null or undefined
      assertParamExists(
        'ynabControllerAuthorize',
        'ynabControllerAuthorizeRequest',
        ynabControllerAuthorizeRequest
      );
      const localVarPath = `/ynab/auth`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        ynabControllerAuthorizeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ynabControllerGetAll: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/ynab/accounts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} accountId
     * @param {YnabControllerLinkRequest} ynabControllerLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ynabControllerLink: async (
      accountId: string,
      ynabControllerLinkRequest: YnabControllerLinkRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists('ynabControllerLink', 'accountId', accountId);
      // verify required parameter 'ynabControllerLinkRequest' is not null or undefined
      assertParamExists(
        'ynabControllerLink',
        'ynabControllerLinkRequest',
        ynabControllerLinkRequest
      );
      const localVarPath = `/ynab/accounts/{accountId}/link`.replace(
        `{${'accountId'}}`,
        encodeURIComponent(String(accountId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        ynabControllerLinkRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * YnabApi - functional programming interface
 * @export
 */
export const YnabApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = YnabApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {YnabControllerAuthorizeRequest} ynabControllerAuthorizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ynabControllerAuthorize(
      ynabControllerAuthorizeRequest: YnabControllerAuthorizeRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ynabControllerAuthorize(
          ynabControllerAuthorizeRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YnabApi.ynabControllerAuthorize']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ynabControllerGetAll(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<YnabControllerGetAll200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ynabControllerGetAll(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YnabApi.ynabControllerGetAll']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} accountId
     * @param {YnabControllerLinkRequest} ynabControllerLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ynabControllerLink(
      accountId: string,
      ynabControllerLinkRequest: YnabControllerLinkRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.ynabControllerLink(
          accountId,
          ynabControllerLinkRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['YnabApi.ynabControllerLink']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * YnabApi - factory interface
 * @export
 */
export const YnabApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = YnabApiFp(configuration);
  return {
    /**
     *
     * @param {YnabControllerAuthorizeRequest} ynabControllerAuthorizeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ynabControllerAuthorize(
      ynabControllerAuthorizeRequest: YnabControllerAuthorizeRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .ynabControllerAuthorize(ynabControllerAuthorizeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ynabControllerGetAll(
      options?: any
    ): AxiosPromise<YnabControllerGetAll200Response> {
      return localVarFp
        .ynabControllerGetAll(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} accountId
     * @param {YnabControllerLinkRequest} ynabControllerLinkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ynabControllerLink(
      accountId: string,
      ynabControllerLinkRequest: YnabControllerLinkRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .ynabControllerLink(accountId, ynabControllerLinkRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * YnabApi - object-oriented interface
 * @export
 * @class YnabApi
 * @extends {BaseAPI}
 */
export class YnabApi extends BaseAPI {
  /**
   *
   * @param {YnabControllerAuthorizeRequest} ynabControllerAuthorizeRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YnabApi
   */
  public ynabControllerAuthorize(
    ynabControllerAuthorizeRequest: YnabControllerAuthorizeRequest,
    options?: RawAxiosRequestConfig
  ) {
    return YnabApiFp(this.configuration)
      .ynabControllerAuthorize(ynabControllerAuthorizeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YnabApi
   */
  public ynabControllerGetAll(options?: RawAxiosRequestConfig) {
    return YnabApiFp(this.configuration)
      .ynabControllerGetAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} accountId
   * @param {YnabControllerLinkRequest} ynabControllerLinkRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof YnabApi
   */
  public ynabControllerLink(
    accountId: string,
    ynabControllerLinkRequest: YnabControllerLinkRequest,
    options?: RawAxiosRequestConfig
  ) {
    return YnabApiFp(this.configuration)
      .ynabControllerLink(accountId, ynabControllerLinkRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
